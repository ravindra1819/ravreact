// --------------------
// üß† EVENT LOOP CONCEPT ‚Äî TEACHING SCRIPT
// --------------------

// STEP 1: INTRODUCTION
// JavaScript is single-threaded ‚Äî it runs one task at a time on the call stack.
// But we still do async things (setTimeout, fetch, Promises).
// The Event Loop is what makes this possible.

// STEP 2: COMPONENTS
// 1Ô∏è‚É£ Call Stack        ‚Üí Executes synchronous code line-by-line.
// 2Ô∏è‚É£ Web APIs          ‚Üí Browser handles async work like timers, fetch, DOM events.
// 3Ô∏è‚É£ Microtask Queue   ‚Üí High priority async callbacks (Promise.then, queueMicrotask).
// 4Ô∏è‚É£ Macrotask Queue   ‚Üí Lower priority callbacks (setTimeout, setInterval, fetch).
// 5Ô∏è‚É£ Event Loop        ‚Üí Keeps checking if Call Stack is empty, then moves queued tasks.

// STEP 3: EXECUTION ORDER
// 1. Run all synchronous code first (Call Stack).
// 2. Async tasks go to Web APIs.
// 3. When done, callbacks move to queues.
// 4. Event Loop:
//    - If stack is empty ‚Üí run ALL microtasks first.
//    - Then run ONE macrotask.
//    - Repeat forever.

// --------------------
// üß© DEMO USING ANIMATED VERSION
// --------------------

// 1Ô∏è‚É£ Click: setTimeout(0)
// - Moves to Web APIs.
// - After 0ms ‚Üí moves to Callback (Macrotask) Queue.

// 2Ô∏è‚É£ Click: Promise.then(...)
// - Goes straight to Microtask Queue.

// 3Ô∏è‚É£ Click ‚ñ∂ Play
// - Event Loop starts moving tasks.
// - Watch carefully: Promise (microtask) runs before setTimeout (macrotask).
// console.log("Microtasks always run before Macrotasks!");

// 4Ô∏è‚É£ Click: fetch("/api")
// - Appears in Web APIs for 1 second.
// - When done ‚Üí moves to Macrotask Queue.
// - After macrotask executes ‚Üí creates another Promise.then() ‚Üí Microtask.
// console.log("Fetch callback runs, then fetch.then microtask runs!");

// 5Ô∏è‚É£ Click: Run sync work (500ms)
// - Adds a heavy synchronous task to Call Stack.
// - During this time, all other queues wait.
// console.warn("Long sync task blocks the Event Loop!");

// --------------------
// üß≠ KEY TAKEAWAYS
// --------------------
// ‚úÖ JS is single-threaded, but async via Web APIs.
// ‚úÖ Event Loop checks if Call Stack is empty.
// ‚úÖ Microtasks (Promises) always run before Macrotasks (setTimeout).
// ‚úÖ Blocking code pauses everything.
// ‚úÖ This model keeps JavaScript responsive and efficient.

// --------------------
// üß© DEMO SUMMARY COMMANDS (for teaching flow)
// --------------------
// 1. Click: setTimeout(0)
// 2. Click: Promise.then(...)
// 3. Click: ‚ñ∂ Play
// 4. Observe micro ‚Üí macro order
// 5. Click: fetch("/api")
// 6. Click: Run sync work (500ms)
// 7. Click: ‚ôª Reset and repeat
